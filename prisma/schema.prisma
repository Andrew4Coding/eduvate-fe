generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  password        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  emailVerified   Boolean
  image           String?
  Admin           Admin[]
  Student         Student[]
  Teacher         Teacher[]
  UserLog         UserLog[]
  UserPreferences UserPreferences[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model School {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  address   String?
  isHidden  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Admin     Admin[]
  Student   Student[]
  Teacher   Teacher[]
  Course    Course[]  @relation("CourseToSchool")

  @@map("schools")
}

model Admin {
  id        String     @id @default(cuid())
  userId    String
  role      ADMIN_ROLE @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schoolId  String
  school    School     @relation(fields: [schoolId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Student {
  id             String           @id @default(cuid())
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  schoolId       String
  Attendance     Attendance[]
  QuizSubmission QuizSubmission[]
  school         School           @relation(fields: [schoolId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  TaskSubmission TaskSubmission[]
  Course         Course[]         @relation("CourseToStudent")
}

model Teacher {
  id             String           @id @default(cuid())
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  schoolId       String
  TaskSubmission TaskSubmission[]
  school         School           @relation(fields: [schoolId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  Course         Course[]         @relation("CourseToTeacher")
}

model Course {
  id            String          @id @default(cuid())
  name          String
  code          String          @unique
  description   String?
  isHidden      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      COURSE_CATEGORY
  CourseSection CourseSection[]
  School        School[]        @relation("CourseToSchool")
  students      Student[]       @relation("CourseToStudent")
  teachers      Teacher[]       @relation("CourseToTeacher")
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String
  isDisabledMode Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model CourseSection {
  id          String       @id @default(cuid())
  name        String
  description String?
  isHidden    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseId    String
  CourseItem  CourseItem[]
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseItem {
  id              String           @id @default(cuid())
  name            String
  description     String?
  isHidden        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  courseSectionId String
  type            COURSEITEM_TYPE
  AttendanceItem  AttendanceItem[]
  courseSection   CourseSection    @relation(fields: [courseSectionId], references: [id], onDelete: Cascade)
  Material        Material?
  Quiz            Quiz?
  Task            Task?
}

model Material {
  id           String     @id @default(cuid())
  fileUrl      String
  fileType     FILE_TYPE
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  courseItemId String     @unique
  courseItem   CourseItem @relation(fields: [courseItemId], references: [id], onDelete: Cascade)
}

model Quiz {
  id             String           @id @default(cuid())
  title          String
  description    String?
  openDate       DateTime        @default(now())
  dueDate        DateTime
  closeDate      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseItemId   String           @unique
  courseItem     CourseItem       @relation(fields: [courseItemId], references: [id], onDelete: Cascade)
  QuizQuestion   QuizQuestion[]
  QuizSubmission QuizSubmission[]
}

model QuizQuestion {
  id                   String                 @id @default(cuid())
  question             String
  answer               String
  type                 QUESTION_TYPE
  isHidden             Boolean                @default(false)
  options              String[]
  explanation          String?
  correctAnswer        String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  quizId               String
  quiz                 Quiz                   @relation(fields: [quizId], references: [id])
  QuizSubmissionAnswer QuizSubmissionAnswer[]
  QuizQuestionChoice   QuizQuestionChoice[]
}

model QuizQuestionChoice {
  id             String       @id @default(cuid())
  text           String
  quizQuestionId String
  quizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id])
}

model QuizSubmission {
  id                   String                 @id @default(cuid())
  studentId            String
  quizId               String
  answers              String[]
  score                Int
  isGraded             Boolean                @default(false)
  isHidden             Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  quiz                 Quiz                   @relation(fields: [quizId], references: [id])
  student              Student                @relation(fields: [studentId], references: [id])
  QuizSubmissionAnswer QuizSubmissionAnswer[]
}

model QuizSubmissionAnswer {
  id               String         @id @default(cuid())
  quizSubmissionId String
  quizQuestionId   String
  answer           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  quizQuestion     QuizQuestion   @relation(fields: [quizQuestionId], references: [id])
  quizSubmission   QuizSubmission @relation(fields: [quizSubmissionId], references: [id])
}

model Task {
  id             String           @id @default(cuid())
  openDate       DateTime?        @default(now())
  dueDate        DateTime?
  closeDate      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseItemId   String           @unique
  courseItem     CourseItem       @relation(fields: [courseItemId], references: [id], onDelete: Cascade)
  TaskAttachment TaskAttachment[]
  TaskSubmission TaskSubmission[]
}

model TaskAttachment {
  id          String    @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  fileType    FILE_TYPE
  isHidden    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id])
}

model TaskSubmission {
  id                       String                     @id @default(cuid())
  studentId                String
  taskId                   String
  fileUrl                  String
  isGraded                 Boolean                    @default(false)
  isHidden                 Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  grade                    Int?
  feedback                 String?
  graderId                 String?
  grader                   Teacher?                   @relation(fields: [graderId], references: [id])
  student                  Student                    @relation(fields: [studentId], references: [id])
  task                     Task                       @relation(fields: [taskId], references: [id])
  TaskSubmissionAttachment TaskSubmissionAttachment[]
}

model TaskSubmissionAttachment {
  id               String         @id @default(cuid())
  name             String
  description      String?
  fileUrl          String
  fileType         FILE_TYPE
  isHidden         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  taskSubmissionId String
  taskSubmission   TaskSubmission @relation(fields: [taskSubmissionId], references: [id])
}

model AttendanceItem {
  id           String       @id @default(cuid())
  name         String
  description  String?
  isHidden     Boolean      @default(false)
  openDate     DateTime?    @default(now())
  dueDate      DateTime?
  closeDate    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  courseItemId String
  Attendance   Attendance[]
  courseItem   CourseItem   @relation(fields: [courseItemId], references: [id])
}

model Attendance {
  id               String         @id @default(cuid())
  studentId        String
  attendanceItemId String
  isPresent        Boolean
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  attendanceItem   AttendanceItem @relation(fields: [attendanceItemId], references: [id])
  student          Student        @relation(fields: [studentId], references: [id])
}

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ADMIN_ROLE {
  SUPER_ADMIN
  ADMIN
}

enum COURSE_CATEGORY {
  SOCIOLOGY
  GEOGRAPHY
  ENGLISH
  MATHEMATICS
  ECONOMICS
  HISTORY
  SCIENCE
  ART
  MUSIC
  PHYSICAL_EDUCATION
  STATISTICS
}

enum COURSEITEM_TYPE {
  MATERIAL
  QUIZ
  TASK
}

enum FILE_TYPE {
  PDF
  VIDEO
  AUDIO
  PPT
}

enum QUESTION_TYPE {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
}
